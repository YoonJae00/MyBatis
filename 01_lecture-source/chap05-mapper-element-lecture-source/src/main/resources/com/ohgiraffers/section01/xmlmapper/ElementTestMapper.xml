<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ohgiraffers.section01.xmlmapper.ElementTestMapper">

<!--     필기. Mapper.xml 파일에서 사용할 수 있는 엘리먼트는 총 9가지 이다.
              <cache>, <cache-ref>, <resultMap>, <parameterMap>, <sql>
              <select>, <inset>, <update>, <delete>
              -->

<!--    필기. <cache> 엘리먼트 -->
<!--    필기.
            1. eviction : 캐시 알고리즘 속성 LRU, FIFO, SOFT, WEAK 디폴트는 LRU
            2. flushInterval : 설정된 캐시를 얼마동안 유지할 지 밀리초 단위로 양수만 설정 가능
            3. size : 캐시에 저장할 객체의 수를 지정, 디폴트는 1024 ( 더 크게도 가능하지만 메모리고려)
            4. readonly : 읽기만 가능한 경우 캐시 데이터의 변경이 되지 않음
                - 캐시란? 컴퓨터 과학에서 데이터나 값을 미리 복사해둔 임시 저장소를 가르킨다.
                - 값을 다시 계산하는 경우 시간을 절약하고 싶을 때 사용한다.
                - 캐시에 데이터를 미리 복사 해두면 접근 시간 없이 더 빠른 속도로 데이터에 접근 가능하다.
             -->
    <cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>

    <select id="selectCacheTest" resultType="java.lang.String">
        SELECT MENU_NAME
        FROM TBL_MENU
    </select>


<!--    필기. <resultMap> 엘리먼트-->
<!--    필기.
            1. DB 에서 조회한 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트다.
            2. resultMap 엘리먼트는 Mybatis 에서 가장 중요하고 강력한 엘리먼트다.
            3. (JDBC) ResultSet 에서 데이터를 가져올 때 작성되는 JDBC 코드를 줄여주는 역할을 한다.
            4. 실제로 join 매핑과 같은 복잡한 코드는 굉장히 많은 코드가 필요한데 ResultMap 은 이걸 효율적으로 바꿔준다.
-->
<!--    필기. 속성
         1. id : 매핑 구문에서 결과 매핑을 사용할 때 구분하기 위한 ID 역할
         2. type : 결과 매핑을 적용하는 대상 객체 타입 (= 매핑 구문의 결과 데이터를 저장할 Java 타입 지정)
         3. extends : 자바의 상속처럼 기존에 정의 된 매핑 결과를 상속받아 확장할 수 있다.
         4. automapping : 결과 매핑을 자동으로 할 것인지를 결정
                          auto 매핑 설정은 동일한 컬럼명이 있는 경우 위험성을 가진다. 따라서 사용하지 않는 것을 권장
-->
    <resultMap id="menuResultMap1" type="com.ohgiraffers.common.MenuDTO" autoMapping="false">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
    </resultMap>

    <resultMap id="menuResultMap2" type="com.ohgiraffers.common.MenuDTO" extends="menuResultMap1" autoMapping="false">
        <result property="orderableStatus" column="ORDERABLE_STAUTS"/>
    </resultMap>

    <select id="selectResultMapTest" resultMap="menuResultMap2">
        SELECT *
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
    </select>

<!--    필기. <resultMap> 의 하위 엘리먼트
         1. id : pk 컬럼을 매핑하기 위한 태그이다. (성능 향상)
         2. result : pk 가 아닌 일반 컬럼에 매핑하기 위한 태그
         3. constructor : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용
         4. association : 복잡한 타입의 연관관계로 1:1 포함 관계인 경우 사용한다.
         5. collection : 복잡한 타입의 연관관계로 1:다 포함 관계인 경우 사용한다.
-->

<!--    필기. <constructor>
                <idArg>, <arg> 하위 엘리먼트들이 있다.
                id, result 엘리먼트는 setter 이용하기 때문에 property 를 지정하지만
                생성자는 순서와 타입을 맞춰서 사용해야 한다.
-->
    <resultMap id="menuResultMap3" type="com.ohgiraffers.common.MenuDTO">
        <constructor>
            <idArg column="MENU_CODE" javaType="_int"/>
            <arg column="MENU_NAME" javaType="string"/>
            <arg column="MENU_PRICE" javaType="_int"/>
            <arg column="CATEGORY_CODE" javaType="_int"/>
            <arg column="ORDERABLE_STATUS" javaType="string"/>
        </constructor>
    </resultMap>

    <select id="selectResultMapConstructorTest" resultMap="menuResultMap3">
        SELECT MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
    </select>

<!--    필기. association  -->
<!--    필기. resultMap 을 구성하는 방법
              1. 따로 만든 resultMap 을 이용하는 방법 -->
<!--    <resultMap id="categoryResultMap" type="com.ohgiraffers.common.CategoryDTO">-->
<!--        <id property="code" column="CATEGORY_CODE"/>-->
<!--        <result property="name" column="CATEGORY_NAME"/>-->
<!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->
<!--    </resultMap>-->
<!--    -->
<!--    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuAndCategoryDTO">-->
<!--        <id property="code" column="MENU_CODE"/>-->
<!--        <result property="name" column="MENU_NAME"/>-->
<!--        <result property="price" column="MENU_PRICE"/>-->
<!--        <result property="orderableStatus" column="ORDERABLE_STATUS"/>-->
<!--        <association property="categoryDTO" resultMap="categoryResultMap"/>-->
<!--    </resultMap>-->

<!--    필기. resultMap 을 구성하는 방법 2. association 내에 id, result 작성하는 방법 -->
    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuAndCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        <association property="categoryDTO" javaType="com.ohgiraffers.common.CategoryDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        </association>
    </resultMap>

<!--    필기. 메뉴테이블에 있는 모든 컬럼, 카테고리테이블에 있는 모든 컬럼-->
    <select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
        SELECT A.MENU_CODE, A.MENU_NAME, A.MENU_PRICE, A.ORDERABLE_STATUS, B.CATEGORY_CODE, B.CATEGORY_NAME, B.REF_CATEGORY_CODE
        FROM TBL_MENU A
        JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.common.CategoryAndMenuDTO">
        <id property="code" column="CATEGORY_CODE"/>
        <result property="name" column="CATEGORY_NAME"/>
        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        <collection property="menuList" ofType="com.ohgiraffers.common.MenuDTO">
            <id property="code" column="MENU_CODE"/>
            <result property="name" column="MENU_NAME"/>
            <result property="categoryCode" column="CATEGORY_CODE"/>
            <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        </collection>
    </resultMap>
    <select id="selectResultMapCollectionTest" resultMap="categoryAndMenuResultMap">
        SELECT A.CATEGORY_CODE, A.CATEGORY_NAME, A.REF_CATEGORY_CODE, B.MENU_CODE, B.MENU_NAME, B.MENU_PRICE, B.CATEGORY_CODE, B.ORDERABLE_STATUS
        FROM TBL_CATEGORY A
        LEFT JOIN TBL_MENU B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        ORDER BY A.CATEGORY_CODE
    </select>

<!--    필기. <sql> 엘리먼트 각 매핑 구문에서 공통으로 사용할 수 있는 SQL 문자열의 일부를 정의하고 재사용하기 위해 사용-->
    <sql id="columns">
        MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
    </sql>

    <select id="selectSqlTest" resultMap="menuResultMap2">
        SELECT <include refid="columns"/>
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
    </select>

<!--    필기. 자주 사용하는 속성
            1. parameterType : 파라미터의 타입을 의미. 이미 정의 된 타입(hashmap 등) 을 사용할 수 있고,
                                개발자가 정의한 타입을 사용하는 경우 full-name 을 기술해야 한다.
            2. resultType : 매핑 구문의 결과 행을 반환할 타입이다. 전체 결과의 타입을 지정하는 것이 아닌
                            하나의 행(row)에 해당하는 타입을 설정해야 한다.
            3. resultMap : 매핑 구문의 결과 행을 미리 선언한 resultMap 을 이용한다는 의미
                                -->

</mapper>