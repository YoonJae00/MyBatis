<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">
    <!-- 필기. 별칭 설정 config 파일에서 type 별칭 달기
      <resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO"/>-->
    <resultMap id="menuResultMap" type="MenuDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>
    <!--    필기. <if> 태그 : test 속성의 조건에 해당 할 때만 엘리먼트 구문을 쿼리에 포함한다.-->
    <!--    필기. gte, gt, lte, lt 등등 ( <=(크거나같음) , < , >=(작거나같음), > ) -->
    <!--    필기. <![CDATA[ 문장 ]]> 문장에 해당하는 공간에서는 부등호에 대한 표현이 자유롭다. -->
    <select id="seletMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        SELECT MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
                AND MENU_PRICE < #{price}
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            AND MENU_PRICE BETWEEN 10000 AND #{price}
        </if>
        <if test="price gt 20000 and price lte 30000">
            AND MENU_PRICE BETWEEN 20000 and #{price}
        </if>
        <if test="price gt 30000">
            AND MENU_PRICE BETWEEN 30000 AND #{price}
        </if>
        ORDER BY MENU_CODE
    </select>
    <select id="searchMenu" parameterType="com.ohgiraffers.common.SearchCriteria" resultMap="menuResultMap">
        SELECT A.MENU_CODE, A.MENU_NAME, A.CATEGORY_CODE, A.ORDERABLE_STATUS
        FROM TBL_MENU A
        <if test="condition == 'category'">
            JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
        WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'name'">
            AND A.MENU_NAME LIKE CONCAT('%', #{value}, '%')
        </if>
        <if test="condition == 'category'">
            AND B.CATEGORY_NAME = #{value}
        </if>
        ORDER BY A.MENU_CODE
    </select>
    <select id="searchUpMenu" parameterType="_int" resultMap="menuResultMap">
        SELECT *
        FROM TBL_MENU
        WHERE  <![CDATA[]]>
    </select>

    <!--    필기. <choose>(when\otherwise) 태그 : java 의 switch-case 문의 역할을 한다.  -->
    <!--    필기. 사용방법
                <choose>
                    <when test="조건">
                        쿼리구문
                    </when>
                    ...
                    <otherwise>
                        쿼리구문
                    </otherwise>
                </choose>-->
    <!--    필기. <when> 태그의 test 속성 조건에 부합하면 when 엘리먼트 구문을 쿼리에 포함시킨다.
                 어떠한 when 조건도 만족하지 못하면 <otherwise> 엘리먼트 구문을 쿼리에 포함한다.-->
    <select id="searchMenuBySubCategory" parameterType="com.ohgiraffers.common.SearchCriteria"
            resultMap="menuResultMap">
        SELECT MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
        <choose>
            <when test="value == '식사'">
                AND CATEGORY_CODE IN (1, 4, 5)
            </when>
            <when test="value == '음료'">
                AND CATEGORY_CODE = 2
            </when>
            <otherwise>
                AND CATEGORY_CODE IN (3)
            </otherwise>
        </choose>
        ORDER BY MENU_CODE
    </select>

    <!--    필기. <foreach> 태그 : JAVA 의 for 문처럼 동작을 한다.
                   1. collection 속성 : 반복을 수행할 대상
                   2. item 속성 : 반복을 수행할 때마다 꺼내올 값의 이름 설정
                   3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
                   4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
                   5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문지-->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        SELECT MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
        AND MENU_CODE IN
        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator="," close=")">
            #{menuCode}
        </foreach>
        <!--        <foreach collection="@com.ohgiraffers.section01.xml.Application@createRandomMenuCodeList" item="menuCode" open="(" separator="," close=")">-->
        <!--           #{menuCode} -->
        <!--        </foreach>             parameter 객체를 안줘도 static 필드나 static 메소드로 직접 접근 인식 가능-->
    </select>

    <!--    필기. <where> 태그 : 엘리먼트 구문이 where 로 시작하지 않으면 자동으로 where 를 붙여준다.
                                또한 where 엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where 를 무시한다.
                                단, name 부분에 where 를 빼주지 않으면 where where 이렇게 SQL 문이 작성된다.
                                엘리먼트 구문이 AND 나 OR 로 시작하면 자동으로 해당 단어를 지워준다.
                                -->
    <select id="searchMenuByCodeOrSearchAll" parameterType="com.ohgiraffers.common.SearchCriteria"
            resultMap="menuResultMap">
        SELECT MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
        FROM TBL_MENU
        <if test="condition != null and condition == 'menuCode'">
            <where>
                MENU_CODE = #{value}
            </where>
        </if>
    </select>
    <!--    필기. <where> 태그 : 엘리먼트 구문이 where 로 시작하지 않으면 자동으로 where 를 붙여준다.
                               또한 where 엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where 를 무시한다.
                               단, name 부분에 where 를 빼주지 않으면 where where 이렇게 SQL 문이 작성된다.
                               엘리먼트 구문이 AND 나 OR 로 시작하면 자동으로 해당 단어를 지워준다.
                               -->
    <!--    필기. <trim> 태그 : 조회 조건에 AND 혹은 OR 로 시작하지 않는 다른 문자로 시작하는 경우 등
                               where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해
                               trim 엘리먼트를 제공한다.
                               1. prefix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                               2. prefixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 앞에 속성값에 해당하는 문자를 자동 삭제, 지정된 구문 제거
                               3. suffix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
                               4. suffixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 뒤에 속성값에 해당하는 문자 자동 삭제-->

    <!-- 필기. 메뉴 혹은 카테고리코드로 검색, 단 메뉴와 카테고리 둘 다 일치하는 경우도 검색하며, 검색 조건이 없는 경우 전체 검색-->
    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap">
        SELECT MENU_CODE, MENU_NAME, MENU_PRICE, CATEGORY_CODE, ORDERABLE_STATUS
        FROM TBL_MENU
        <!-- 필기. 문제 발생 생황 : 카테고리만 검색을 하는 경우 WHERE 가 붙지 않아 문법 오류 발생 -->
        <!--            <if test="nameValue != null">-->
        <!--            WHERE MENU_NAME LIKE CONCAT('%', #{nameValue}, '%')-->
        <!--        </if>-->
        <!--        <if test="categoryValue != null">-->
        <!--            AND CATEGORY_CODE = #{categoryValue}-->
        <!--        </if>-->
        <!-- 필기. 해결방법 1 : <where> 태그 이용-->
<!--        <where>-->
<!--            <if test="nameValue != null">-->
<!--                MENU_NAME LIKE CONCAT('%', #{nameValue}, '%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                AND CATEGORY_CODE = #{category_code}-->
<!--            </if>-->
<!--        </where>-->
<!--        필기. 해결방법 2 : <trim> 태그 이용-->
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                MENU_NAME LIKE CONCAT('%' , #{nameValue}, '%')
            </if>
            <if test="categoryValue != null">
                AND CATEGORY_CODE = #{categoryValue}
            </if>
        </trim>
    </select>

    <update id="modifyMenu" parameterType="hashmap">
<!--    필기. update 의 경우 모든 컬럼에 대하여 수정할 값을 입력한다는 가정하에 아래 쿼리문을 작성할 수 있다.
             하지만 값을 입력한 일부 컬럼만 값을 변경하려면, 아래와 같은 쿼리문은 수정을 원치 않는 값까지
             변경할 가능성이 있다.
             따라서 값을 입력한 일부 컬람만 수정하기 위해 <if> 태그를 활용할 수 있다.-->
<!--        -->
<!--        UPDATE TBL_MENU-->
<!--        SET MENU_NAME = #{name}, CATEGORY_CODE = #{categoryCode}, ORDERABLE_STATUS = #{orderableStatus)-->
<!--        WHERE MENU_CODE = #{code}-->
<!--        문제 발생 상황 : 메뉴명 값을 입력하지 않는 경우 SET 이 붙지 않아 쿼리 오류 발생-->
<!--        UPDATE TBL_MENU-->
<!--        <if test="name !=null and name != ''">-->
<!--            SET MENU_NAME = #{name}-->
<!--        </if>-->
<!--        <if test="categoryCode != null and categoryCode gt 0">-->
<!--            , CATEGORY_CODE = #{categoryCode}-->
<!--        </if>-->
<!--        필기. 해결방안 1 : <set> 엘리먼트 이용-->
<!--        UPDATE TBL_MENU-->
<!--        <set>-->
<!--            <if test="name != null and name != ''">-->
<!--                MENU_NAME = #{name}-->
<!--            </if>-->
<!--            <if test="categoryCode != null and categoryCode gt 0">-->
<!--                ,CATEGORY_CODE = #{categoryCode}-->
<!--            </if>-->
<!--            <if test="orderableStatus != null and orderableStatus != ''">-->
<!--                ,ORDERABLE_STATUS = #{orderableStatus}-->
<!--            </if>-->
<!--        </set>-->
<!--            WHERE MENU_CODE = #{code}-->
<!--        필기. 해결방안 2 : <trim> 태그 이용 -->
        UPDATE TBL_MENU
        <trim prefix="SET" prefixOverrides=",">
            <if test="name != null and name != ''">
                , MENU_NAME = #{name}
            </if>
            <if test="categoryCode != null and categoryCode gt 0">
                , CATEGORY_CODE = #{categoryCode}
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                , ORDERABLE_STATUS = #{orderableStatus}
            </if>
        </trim>
        WHERE MENU_CODE = #{code}
    </update>
</mapper>